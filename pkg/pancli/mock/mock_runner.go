// Code generated by MockGen. DO NOT EDIT.
// Source: pancli_ssh.go
//
// Generated by this command:
//
//	mockgen -source=pancli_ssh.go -destination=mock/mock_runner.go -package=mock PancliRunner
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSSHRunner is a mock of SSHRunner interface.
type MockSSHRunner struct {
	ctrl     *gomock.Controller
	recorder *MockSSHRunnerMockRecorder
	isgomock struct{}
}

// MockSSHRunnerMockRecorder is the mock recorder for MockSSHRunner.
type MockSSHRunnerMockRecorder struct {
	mock *MockSSHRunner
}

// NewMockSSHRunner creates a new mock instance.
func NewMockSSHRunner(ctrl *gomock.Controller) *MockSSHRunner {
	mock := &MockSSHRunner{ctrl: ctrl}
	mock.recorder = &MockSSHRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHRunner) EXPECT() *MockSSHRunnerMockRecorder {
	return m.recorder
}

// RunCommand mocks base method.
func (m *MockSSHRunner) RunCommand(secrets map[string]string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{secrets}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockSSHRunnerMockRecorder) RunCommand(secrets any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{secrets}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockSSHRunner)(nil).RunCommand), varargs...)
}
