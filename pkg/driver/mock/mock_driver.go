// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go
//
// Generated by this command:
//
//	mockgen -source=driver.go -destination=mock/mock_driver.go -package=mock StorageProviderClient PanMounter
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	pancli "github.com/panasasinc/panfs-container-storage-interface-oss/pkg/pancli"
	utils "github.com/panasasinc/panfs-container-storage-interface-oss/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProviderClient is a mock of StorageProviderClient interface.
type MockStorageProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderClientMockRecorder
	isgomock struct{}
}

// MockStorageProviderClientMockRecorder is the mock recorder for MockStorageProviderClient.
type MockStorageProviderClientMockRecorder struct {
	mock *MockStorageProviderClient
}

// NewMockStorageProviderClient creates a new mock instance.
func NewMockStorageProviderClient(ctrl *gomock.Controller) *MockStorageProviderClient {
	mock := &MockStorageProviderClient{ctrl: ctrl}
	mock.recorder = &MockStorageProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderClient) EXPECT() *MockStorageProviderClientMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockStorageProviderClient) CreateVolume(volumeName string, params *pancli.VolumeCreateParams, secret map[string]string) (*utils.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", volumeName, params, secret)
	ret0, _ := ret[0].(*utils.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockStorageProviderClientMockRecorder) CreateVolume(volumeName, params, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockStorageProviderClient)(nil).CreateVolume), volumeName, params, secret)
}

// DeleteVolume mocks base method.
func (m *MockStorageProviderClient) DeleteVolume(volID string, secret map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", volID, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockStorageProviderClientMockRecorder) DeleteVolume(volID, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockStorageProviderClient)(nil).DeleteVolume), volID, secret)
}

// ExpandVolume mocks base method.
func (m *MockStorageProviderClient) ExpandVolume(volumeName string, targetSize int64, secret map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandVolume", volumeName, targetSize, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpandVolume indicates an expected call of ExpandVolume.
func (mr *MockStorageProviderClientMockRecorder) ExpandVolume(volumeName, targetSize, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolume", reflect.TypeOf((*MockStorageProviderClient)(nil).ExpandVolume), volumeName, targetSize, secret)
}

// GetVolume mocks base method.
func (m *MockStorageProviderClient) GetVolume(volumeName string, secret map[string]string) (*utils.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", volumeName, secret)
	ret0, _ := ret[0].(*utils.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStorageProviderClientMockRecorder) GetVolume(volumeName, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockStorageProviderClient)(nil).GetVolume), volumeName, secret)
}

// ListVolumes mocks base method.
func (m *MockStorageProviderClient) ListVolumes(secret map[string]string) (*utils.VolumeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", secret)
	ret0, _ := ret[0].(*utils.VolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockStorageProviderClientMockRecorder) ListVolumes(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockStorageProviderClient)(nil).ListVolumes), secret)
}

// MockPanMounter is a mock of PanMounter interface.
type MockPanMounter struct {
	ctrl     *gomock.Controller
	recorder *MockPanMounterMockRecorder
	isgomock struct{}
}

// MockPanMounterMockRecorder is the mock recorder for MockPanMounter.
type MockPanMounterMockRecorder struct {
	mock *MockPanMounter
}

// NewMockPanMounter creates a new mock instance.
func NewMockPanMounter(ctrl *gomock.Controller) *MockPanMounter {
	mock := &MockPanMounter{ctrl: ctrl}
	mock.recorder = &MockPanMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPanMounter) EXPECT() *MockPanMounterMockRecorder {
	return m.recorder
}

// BindMount mocks base method.
func (m *MockPanMounter) BindMount(source, target string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMount", source, target, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindMount indicates an expected call of BindMount.
func (mr *MockPanMounterMockRecorder) BindMount(source, target, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMount", reflect.TypeOf((*MockPanMounter)(nil).BindMount), source, target, options)
}

// Mount mocks base method.
func (m *MockPanMounter) Mount(source, target string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", source, target, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockPanMounterMockRecorder) Mount(source, target, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockPanMounter)(nil).Mount), source, target, options)
}

// Unmount mocks base method.
func (m *MockPanMounter) Unmount(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockPanMounterMockRecorder) Unmount(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockPanMounter)(nil).Unmount), target)
}
