# Copyright 2025 VDURA Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build Image

on:
  workflow_call:
    inputs:
      app-version:
        description: Driver application version
        type: string
        default: '0.2.0'
        required: false
      build-target:
        description: Build target in Dockerfile
        type: string
        default: 'plugin'
        required: false
      image-name:
        description: Docker image name
        type: string
        required: true
      image-tags:
        description: Docker image tag(s) space separated
        type: string
        default: latest
        required: true
      ref:
        description: Git ref to be built
        type: string
        required: true
      repo-url:
        description: Container registry repository URL
        type: string
        default: 'ghcr.io/${{ github.repository }}'
        required: true
      runner-label:
        description: Runner label to use
        type: string
        default: ubuntu-latest
        required: false
      trivy-scan:
        description: Enables image scan with trivy
        type: boolean
        default: false
        required: false
      push:
        description: Push the image with tags
        type: boolean
        default: true
        required: false
      sanity-tests:
        description: Run sanity tests after build
        type: boolean
        default: false
        required: false

    outputs:
      image-url:
        description: "The full URL of the built and pushed image"
        value: ${{ jobs.build.outputs.image-url }}
      tags:
        description: "Space-separated list of tags for the built image"
        value: ${{ jobs.build.outputs.tags }}
      tag0:
        description: "The first tag of the built image"
        value: ${{ jobs.build.outputs.tag0 }}

jobs:
  build:
    name: Build ${{ inputs.push && 'and Push' || 'Image' }}
    runs-on: ${{ inputs.runner-label }}

    outputs:
      image-url: ${{ steps.image.outputs.image-url }}
      tags: ${{ steps.image.outputs.tags }}
      tag0: ${{ steps.image.outputs.tag0 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build ${{ inputs.repo-url }}/${{ inputs.image-name }} (${{ inputs.image-tags }})
        id: image
        uses: ./.github/actions/build-reusable
        with:
          build-target: "${{ inputs.build-target }}"
          app-version: "${{ inputs.app-version }}"
          image-name: "${{ inputs.image-name }}"
          image-tags: "${{ inputs.image-tags }}"
          repo-url: "${{ inputs.repo-url }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          ref: "${{ github.ref }}"

      - name: Run Trivy vulnerability scanner
        if: inputs.trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.image.outputs.image-url }}:${{ steps.image.outputs.sha-short }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: GHCR Auth
        if: inputs.push
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Push to container registry
        if: inputs.push
        shell: bash
        run: |
          echo "::group::Pushing ${{ steps.image.outputs.image-url }} (${{ steps.image.outputs.tags }}) to registry"
          for tag in ${{ steps.image.outputs.tags }}; do
            docker push "${{ steps.image.outputs.image-url }}:${tag}"
          done
          echo "::notice::ðŸš€ Pushed image ${{ inputs.repo-url }}/${{ inputs.image-name }} (${{ steps.image.outputs.tags }})"
          echo "::endgroup::"

      - name: Cleanup Untagged Images
        uses: dataaxiom/ghcr-cleanup-action@v1
        if: inputs.push
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          packages: ${{ github.event.repository.name }}/${{ inputs.image-name }}
          delete-untagged: true

  sanity-tests:
    name: Sanity Tests
    if: inputs.sanity-tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GHCR Auth
        if: inputs.push
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Run CSI Sanity Tests
        shell: bash
        run: |
          if [ "${{ inputs.build-target }}" = "tests" ]; then
            export CSI_IMAGE=${{ inputs.repo-url }}/panfs-csi-driver:latest
            export CSI_TEST_IMAGE=${{ needs.build.outputs.image-url }}:${{ needs.build.outputs.tag0 }}
          else
            export CSI_IMAGE=${{ needs.build.outputs.image-url }}:${{ needs.build.outputs.tag0 }}
            export CSI_TEST_IMAGE=${{ inputs.repo-url }}/panfs-csi-sanity:stable
          fi

          echo "Using CSI Image: $CSI_IMAGE"
          echo "Using CSI Test Image: $CSI_TEST_IMAGE"

          # Run services from built images
          echo "::group::Running Sanity Tests"
          cd tests/csi_sanity/
          docker compose up \
            --exit-code-from=sanity_tests \
            --always-recreate-deps \
            --force-recreate | tee sanity-tests.log
          test ${PIPESTATUS[1]} -eq 0
          echo "::endgroup::"

      - name: Annotate Sanity Test Results
        if: always()
        shell: bash
        run: |
          echo "::group::Sanity Test Results"

          result="No results found"
          if [ -f tests/csi_sanity/sanity-tests.log ]; then
            result="$(grep -A1 'Ran [0-9]* of [0-9]* Specs in [0-9.]* seconds' tests/csi_sanity/sanity-tests.log 2>/dev/null | tail -1 | sed 's@^[^|]*| @@')"
          fi

          echo "::notice::Sanity Tests: ${result}"
          echo "::endgroup::"
